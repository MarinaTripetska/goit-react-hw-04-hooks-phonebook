{"version":3,"sources":["nofifications/notifyError.js","components/Filter/Filter.js","components/ContactList/ContactIItem/ContactItem.js","components/ContactList/ContactList.js","components/ContactForm/ContactForm.js","initialContacts.js","App.js","hooks/useLocalStorage.js","index.js"],"names":["notify","text","toast","error","position","autoClose","hideProgressBar","closeOnClick","pauseOnHover","draggable","progress","undefined","inputFilterId","require","generate","Filter","value","onChange","className","htmlFor","id","type","ContactItem","name","number","onClick","href","ContactList","contacts","map","contact","shortid","ContactForm","handleSubmit","useState","setName","setNumber","inputNameId","inputPhoneId","handleChange","e","target","reset","onSubmit","preventDefault","pattern","title","required","defaultProps","initialContacts","App","filter","setFilter","key","defaultValue","JSON","parse","window","localStorage","getItem","state","setState","useEffect","setItem","stringify","useLocalStorage","setContacts","visibleContacts","normalizedFilter","toLowerCase","includes","getVisibleContacts","dataName","dataNumber","find","prevState","length","currentTarget","dataId","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.fdaf573d.chunk.js","sourcesContent":["import { toast } from 'react-toastify'\r\nimport 'react-toastify/dist/ReactToastify.css'\r\n\r\nconst notify = text =>\r\n  toast.error(text, {\r\n    position: 'top-center',\r\n    autoClose: 5000,\r\n    hideProgressBar: false,\r\n    closeOnClick: true,\r\n    pauseOnHover: true,\r\n    draggable: true,\r\n    progress: undefined,\r\n  })\r\n\r\nexport default notify\r\n","import './Filter.scss'\r\nconst shortid = require('shortid')\r\n\r\nconst inputFilterId = shortid.generate()\r\n\r\nconst Filter = ({ value, onChange }) => (\r\n  <div className=\"filterThumb\">\r\n    <label htmlFor={inputFilterId} className=\"filter-label\">\r\n      Find contacts by name\r\n    </label>\r\n    <input id={inputFilterId} type=\"text\" onChange={onChange} value={value} />\r\n  </div>\r\n)\r\n\r\nexport default Filter\r\n","import PropTypes from 'prop-types'\r\nimport { MdPhoneEnabled } from 'react-icons/md'\r\nimport { AiFillDelete } from 'react-icons/ai'\r\nimport './ContactItem.scss'\r\n\r\nconst ContactItem = ({ id, name, number, onClick }) => {\r\n  return (\r\n    <li id={id} className=\"contactItem\">\r\n      <span className=\"contactItem__name\">{name}:</span>\r\n      <a href={'tel: ' + name} className=\"contactItem__number\">\r\n        <MdPhoneEnabled /> {number}\r\n      </a>\r\n\r\n      <button className=\"btn-delete\" type=\"button\" onClick={() => onClick(id)}>\r\n        <AiFillDelete /> <span className=\"btn-delete--txt\">Delete</span>\r\n      </button>\r\n    </li>\r\n  )\r\n}\r\n\r\nContactItem.propTypes = {\r\n  id: PropTypes.string.isRequired,\r\n  name: PropTypes.string.isRequired,\r\n  number: PropTypes.string.isRequired,\r\n  onClick: PropTypes.func.isRequired,\r\n}\r\n\r\nexport default ContactItem\r\n","import ContactItem from './ContactIItem/ContactItem'\r\nimport PropTypes from 'prop-types'\r\n\r\nimport './ContactList.scss'\r\n\r\nconst ContactList = ({ contacts, onClick }) => {\r\n  return (\r\n    <ul className=\"contactList\">\r\n      {contacts.map(contact => (\r\n        <ContactItem key={contact.id} id={contact.id} name={contact.name} number={contact.number} onClick={onClick} />\r\n      ))}\r\n    </ul>\r\n  )\r\n}\r\n\r\nContactList.propTypes = {\r\n  contacts: PropTypes.arrayOf(\r\n    PropTypes.shape({\r\n      id: PropTypes.string.isRequired,\r\n      name: PropTypes.string.isRequired,\r\n      number: PropTypes.string.isRequired,\r\n    }),\r\n  ),\r\n}\r\n\r\nexport default ContactList\r\n","import { useState } from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport { MdAddIcCall } from 'react-icons/md'\r\nimport './ContactForm.scss'\r\nconst shortid = require('shortid')\r\n\r\nexport default function ContactForm({ handleSubmit }) {\r\n  const [name, setName] = useState('')\r\n  const [number, setNumber] = useState('')\r\n\r\n  const inputNameId = shortid.generate()\r\n  const inputPhoneId = shortid.generate()\r\n\r\n  const handleChange = e => {\r\n    const { name, value } = e.target\r\n\r\n    switch (name) {\r\n      case 'name':\r\n        setName(value)\r\n        break\r\n\r\n      case 'number':\r\n        setNumber(value)\r\n        break\r\n\r\n      default:\r\n        return\r\n    }\r\n  }\r\n\r\n  const onFormSubmit = e => {\r\n    e.preventDefault()\r\n    handleSubmit(name, number)\r\n    reset()\r\n  }\r\n\r\n  const reset = () => {\r\n    setName('')\r\n    setNumber('')\r\n  }\r\n\r\n  return (\r\n    <form className=\"contactForm\" onSubmit={onFormSubmit}>\r\n      <label className=\"rowName\" htmlFor={inputNameId}>\r\n        Name\r\n        <input\r\n          className=\"input\"\r\n          id={inputNameId}\r\n          type=\"text\"\r\n          name=\"name\"\r\n          pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\r\n          title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\r\n          onChange={handleChange}\r\n          value={name}\r\n          required\r\n        />\r\n      </label>\r\n\r\n      <label className=\"rowNumber\" htmlFor={inputPhoneId}>\r\n        Phone\r\n        <input\r\n          className=\"input\"\r\n          id={inputPhoneId}\r\n          type=\"tel\"\r\n          name=\"number\"\r\n          onChange={handleChange}\r\n          value={number}\r\n          pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\r\n          title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\r\n          required\r\n        />\r\n      </label>\r\n\r\n      <br />\r\n\r\n      <button className=\"buttonSubmit\" type=\"submit\">\r\n        <MdAddIcCall className=\"buttonSubmit-icon\" /> <span className=\"buttonSubmit-txt\">Add contact</span>\r\n      </button>\r\n    </form>\r\n  )\r\n}\r\nContactForm.defaultProps = {\r\n  handleSubmit: () => null,\r\n}\r\nContactForm.propTypes = {\r\n  handleSubmit: PropTypes.func.isRequired,\r\n}\r\n","const initialContacts = [\r\n  { id: 'id-1', name: 'Rosie Simpson', number: '459-12-56' },\r\n  { id: 'id-2', name: 'Hermione Kline', number: '443-89-12' },\r\n  { id: 'id-3', name: 'Eden Clements', number: '645-17-79' },\r\n  { id: 'id-4', name: 'Annie Copeland', number: '227-91-26' },\r\n]\r\n\r\nexport { initialContacts }\r\n","import { useState } from 'react'\r\nimport useLocalStorage from './hooks/useLocalStorage'\r\n\r\nimport { ToastContainer } from 'react-toastify'\r\nimport notify from './nofifications/notifyError'\r\n\r\nimport Filter from './components/Filter'\r\nimport ContactList from './components/ContactList'\r\nimport ContactForm from './components/ContactForm'\r\n\r\nimport './App.scss'\r\n\r\nimport { initialContacts } from './initialContacts'\r\nconst shortid = require('shortid')\r\n\r\nexport default function App() {\r\n  const [filter, setFilter] = useState('')\r\n  const [contacts, setContacts] = useLocalStorage('contacts', [...initialContacts])\r\n\r\n  const handleSubmit = (dataName, dataNumber) => {\r\n    const findSameName = contacts.find(({ name }) => name === dataName)\r\n    !findSameName\r\n      ? setContacts(prevState => {\r\n          return [...prevState, { id: shortid.generate(), name: dataName, number: dataNumber }]\r\n        })\r\n      : notify(`${dataName} is already in contacts!`)\r\n  }\r\n\r\n  const changeFilter = e => {\r\n    setFilter(e.currentTarget.value)\r\n  }\r\n\r\n  const getVisibleContacts = () => {\r\n    const normalizedFilter = filter.toLowerCase()\r\n    return contacts.filter(contact => contact.name.toLowerCase().includes(normalizedFilter))\r\n  }\r\n  const visibleContacts = getVisibleContacts()\r\n\r\n  const handleDelete = dataId => {\r\n    setContacts(prevState => prevState.filter(({ id }) => id !== dataId))\r\n  }\r\n\r\n  return (\r\n    <div className=\"mainThumb\">\r\n      <ToastContainer />\r\n      <h1 className=\"title\">Phone book</h1>\r\n      <ContactForm handleSubmit={handleSubmit} />\r\n\r\n      {contacts.length > 0 && (\r\n        <div className=\"contactThumb\">\r\n          <h2 className=\"title\">Сontacts</h2>\r\n          <Filter value={filter} onChange={changeFilter} />\r\n          <ContactList contacts={visibleContacts} onClick={handleDelete} />\r\n        </div>\r\n      )}\r\n    </div>\r\n  )\r\n}\r\n","import { useState, useEffect } from 'react'\r\n\r\nexport default function useLocalStorage(key, defaultValue) {\r\n  const [state, setState] = useState(() => {\r\n    return JSON.parse(window.localStorage.getItem(key)) ?? defaultValue\r\n  })\r\n\r\n  useEffect(() => {\r\n    window.localStorage.setItem(key, JSON.stringify(state))\r\n  }, [key, state])\r\n\r\n  return [state, setState]\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\n\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n"],"sourceRoot":""}